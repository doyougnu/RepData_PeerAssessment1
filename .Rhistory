download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "CourseProject1_Dataset.csv", method = "curl")
df <- read.csv("CourseProject1_Dataset.csv", header = T, sep = ",")
head(df)
head(df$EVTYPE)
str(df$EVTYPE)
df$EVTYPE[[3]]
df$EVTYPE[[1]]
View(df)
unique(df$EVTYPE)
table(df$EVTYPE)
"?" %in% df
"?" %in% df$EVTYPE
sys.time()
Sys.time()
Sys.time(df <- read.csv("CourseProject1_Dataset.csv", header = T, method = "curl", na.strings = "?"))
Sys.time(df <- read.csv("CourseProject1_Dataset.csv", header = T, method = "curl", na.strings = c("?")))
Sys.time(df <- read.table("CourseProject1_Dataset.csv", header = T, method = "curl", na.strings = c("?", "")))
Sys.time(df <- read.table("CourseProject1_Dataset.csv", header = T, method = "curl", na.strings = c("?")))
df <- read.csv("CourseProject1_Dataset.csv", header = T, method = "curl", na.strings = c("?", ""))
df <- read.csv("CourseProject1_Dataset.csv", header = T, na.strings = c("?", ""))
table(df$EVTYPE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "CourseProject1_Dataset.csv", method = "curl")
df <- read.csv("CourseProject1_Dataset.csv", header = T, na.strings = c("?", ""))
view(df)
View(df)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "CourseProject1_Dataset", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "CourseProject1_Dataset.zip", method = "curl")
unzip("CourseProject1_Dataset.zip")
df.read.csv("activity.csv", header = T, sep = ",", na.strings = c(""))
df <- read.csv("activity.csv", header = T, sep = ",", na.strings = c(""))
str(df)
library(ggplot2)
View(df)
summary(df$steps, df$date)
library(dplyr)
df %>% group_by(steps, date)
df %>% group_by(steps, date) %>% summary()
df %>% group_by(steps, date) %>% mean()
df %>% group_by(steps, date) %>% mean(na.rm = T)
df %>% group_by(steps, date) %>% summarise(stepsPerDay = mean())
df %>% group_by(steps, date) %>% summarise(stepsPerDay = mean(steps))
df %>% group_by(date, steps) %>% summarise(stepsPerDay = mean(steps))
df %>% group_by(date, steps) %>% summarise(stepsPerDay = mean(steps, na.rm = T))
df %>% group_by(date) %>% summarise(stepsPerDay = mean(steps, na.rm = T))
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = median((steps, na.rm = T)))
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T) medStepsPerDay = median((steps, na.rm = T)))
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = media((steps, na.rm = T)))
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = median(steps, na.rm = T))
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = median(steps, na.rm = TRUE))
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = median(steps, na.rm = T))
str(df)
df$steps <- as.integer(df$steps)
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = median(steps, na.rm = T))
table(df$date)
qplot(data = df, x = date, y = steps, geom = "hist")
qplot(data = df, x = date, y = steps, geom = "histogram")
?qplot
qplot(data = df, x = date)
qplot(date, data=df, geom="bar", binwidth = 0.2, weight=steps, ylab = "Steps")
qplot(date, data=df, geom="bar", binwidth = 0.2, weight=steps, ylab = "Steps") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = median(steps, na.rm = T), totStepsPerDay = sum(steps, na.rm = TRUE))
df[, date == 2012-10-01]
df[df$date == 2012-10-01,]
df[df$date == "2012-10-01",]
sum(df[df$date == "2012-10-01",])
sum(df[df$date == "2012-10-01",steps])
sum(df[df$date == "2012-10-01",df$steps])
sum(df[df$date == "2012-10-01",interval])
sum(df[df$date == "2012-10-01",df$interval])
sum(df[df$date == "2012-10-01",df$steps])
df{df$date == "2012-10-01",df$steps]
df[df$date == "2012-10-01",df$steps]
df[df$date == "2012-10-01",]
df[df$date == "2012-10-02",]
618 * 288
df.summary <- df %>% group_by(date) %>% summarise(avgStepsPerDay = mean(steps, na.rm = T), medStepsPerDay = median(steps, na.rm = T))
df.summary
sprintf(df.summary)
print(df.summary)
print.data.frame(df.summary)
print.data.frame(df.summary, row.names = F)
?print.data.frame
qplot(x = interval, y = steps, data=df, geom="line")
qplot(x = interval, y = avgStepsPerDay, data=df.summary)
View(df.summary)
?qplot
qplot(x = interval, y = avgStepsPerDay, data=df.summary, geom = "point")
qplot(x = interval, y = steps, data=df, geom = "point")
df %>% group_by(interval) %>% summarise(avgStepPerInterval = mean(steps, na.rm = T))
df.dailyPatterns <- df %>% group_by(interval) %>% summarise(avgStepPerInterval = mean(steps, na.rm = T))
qplot(x = interval, y = avgStepPerInterval, data=df.dailyPatterns, geom = "point")
max(df.dailyPatterns)
max(df.dailyPatterns$avgStepPerInterval)
max(df.dailyPatterns$avgStepPerInterval, df.dailyPatterns$interval)
?max
pmax(df.dailyPatterns)
df.dailyPatterns %>% filter(avgStepPerInterval == max(avgStepPerInterval))
sum(is.na(df))
is.na(df)
is.na(df$steps)
is.na(df$date)
any(is.na(df))
df.raw <- read.table("activity.csv", header = T, sep = ",")
any(is.na(df.raw))
is.na(df.raw$date)
any(is.na(df.raw$date))
any(is.na(df.raw$steps))
any(is.na(df.raw$interval))
any(is.na(df$steps))
filter(df.raw, steps == NA)
filter(df.raw, steps = NA)
filter(df.raw, steps == "NA")
filter(df.raw, steps == NULL)
df.raw[is.na(df.raw$steps),]
df.na <- df.raw[is.na(df.raw$steps),]
count(df.raw[is.na(df.raw$steps),])
df.notna <- df.raw %>% na.omit()
df.raw[is.na(df.raw$steps),]
dim(df.raw[is.na(df.raw$steps),])
?randomforest
?randomForest
install.packages("randomForest")
library(randomForest)
df.imputed <- na.roughfix(df.raw)
is.na(df.imputed$steps)
any(is.na(df.imputed$steps))
2304/17568
table(df.imputed$steps)
table(df.imputed$steps)[[0]]
table(df.imputed$steps)[["0"]]
table(df.raw$steps)[["0"]]
test <- c(0, 0, 1, 1, 2, 2, 0)
na.roughfix(test)
test <- c(0, 0, 1, 1, 2, 2, 0, NA, NA)
na.roughfix(test)
as.character(test)
as.numeric(as.character(test))
as.numeric(as.factor(test))
as.integer(as.factor(test))
as.integer(as.character(as.factor(test)))
